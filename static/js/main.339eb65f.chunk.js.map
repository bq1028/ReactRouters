{"version":3,"sources":["images/map.png","components/Navbar.js","components/Footer.js","components/Home.js","components/About.js","components/Contact.js","components/Post.js","components/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","withRouter","props","react_default","a","createElement","className","NavLink","to","Footer","Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","posts","_this2","axios","get","then","res","console","log","setState","data","slice","postList","length","map","post","key","id","src","Map","alt","Link","concat","title","body","components_Footer","Component","About","Contact","Post","match","params","post_id","Gallery","images","imagesGallerry","img","thumbnailUrl","App","BrowserRouter","components_Navbar","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.339eb65f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.93a0b9dc.png\";","import React from 'react';\r\nimport {Link, NavLink, withRouter} from 'react-router-dom'\r\n//Link works simmilarly to a tag\r\n//NavLink works same as Link only adds active class => css styling can be applied\r\n\r\n\r\nconst Navbar = (props) => {\r\n  return(\r\n    <nav className='nav-wrapper green darken-3'>\r\n      <div className='container'>\r\n        <a className='brand-logo'>React ROUTER</a>\r\n        <ul className='right'>\r\n          <li><NavLink to=\"/\"> Home</NavLink></li>\r\n          <li><NavLink to=\"/about\">About</NavLink></li>\r\n          <li><NavLink to=\"/contact\">Contact</NavLink></li>\r\n          <li><NavLink to=\"/gallery\">Gallery</NavLink></li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default withRouter(Navbar);\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className='page-footer green darken-3'>\r\n      <div className='container'>\r\n        <div className=\"col l6 s12\">\r\n            <h5 className=\"white-text\">Footer </h5>\r\n            <p className=\"grey-text text-lighten-4\">React Router</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"footer-copyright green darken-4\">\r\n          <div className=\"container\">\r\n          Â© 2018 JAN DUPLINSZKI\r\n          </div>\r\n          </div>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer;\r\n","import React, {Component}from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\nimport Map from '../images/map.png';\r\nimport Footer from './Footer'\r\n\r\nclass Home extends Component {\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      posts: []\r\n    }\r\n  }\r\n  //fetch posts from API and save thhem in the state\r\n  // use LINK to be able to access and open individual posts\r\n  componentDidMount(){\r\n    const url = 'https://jsonplaceholder.typicode.com/posts';\r\n    axios.get(url)\r\n    .then( res => {\r\n      console.log(res)\r\n      this.setState({\r\n        posts: res.data.slice(0, 10)\r\n      })\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const {posts} = this.state;\r\n    const postList = posts.length ?  (\r\n      posts.map( post => {\r\n        return(\r\n          <div className='post card z-depth-2' key={post.id}>\r\n            <img src={Map} alt='map' />\r\n            <div className='card-content'>\r\n              <Link to={`/${post.id}`}>\r\n                <h3 className='card-title green-text'>{post.title}</h3>\r\n              </Link>\r\n              <p>{post.body}</p>\r\n            </div>\r\n          </div>\r\n        )\r\n      })\r\n    ) : (\r\n        <div className='center'>\r\n          <p className='center'>No Post Yet</p>\r\n        </div>\r\n    )\r\n\r\n    return(\r\n      <div>\r\n        <div className='container'>\r\n          <h1 className='center'>Home</h1>\r\n          {postList}\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst About = (props) => {\r\n\r\n  return(\r\n    <div className='container'>\r\n      <h1 className='center'>About</h1>\r\n      <p>There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text.</p> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\n\r\nconst Contact = () => {\r\n  return(\r\n    <div className='container contact'>\r\n        <ul className=\"collection with-header center \">\r\n           <li className=\"collection-header\"><h4>Contact</h4></li>\r\n           <li className=\"collection-item\">Tel: 20502155</li>\r\n           <li className=\"collection-item\">Email: contact@email.com</li>\r\n           <li className=\"collection-item\">\r\n              25 Brooke Road <br />\r\n              London <br />\r\n              United Kingdom\r\n           </li>\r\n        </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Contact;\r\n","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Post extends Component {\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      post: ''\r\n    }\r\n  }\r\n\r\n  //fetch post from API and save it in the state\r\n  componentDidMount(){\r\n    let id = this.props.match.params.post_id;\r\n    const url = 'https://jsonplaceholder.typicode.com/posts/';\r\n    axios.get(url + id)\r\n      .then( res => {\r\n        this.setState({\r\n          post: res.data\r\n        })\r\n        console.log(res.data)\r\n      })\r\n  }\r\n\r\n  render(){\r\n    const post = this.state.post ? (\r\n      <div className='post card'>\r\n        <div className='card-content'>\r\n          <h4 className='center green-text text-darken-4'>{this.state.post.title}</h4>\r\n          <p>{this.state.post.body}</p>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div className='center'>LOODING POST...</div>\r\n    )\r\n    return(\r\n      <div className='container'>\r\n        {post}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Post;\r\n","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Gallery extends Component {\r\n    constructor(){\r\n      super()\r\n      this.state ={\r\n        images: []\r\n      }\r\n    }\r\n\r\n    componentDidMount(){\r\n      const url = 'https://jsonplaceholder.typicode.com/photos';\r\n      axios.get(url)\r\n        .then( res => {\r\n          this.setState({\r\n            images: res.data.slice(0, 20)\r\n          })\r\n        })\r\n    }\r\n\r\n    render(){\r\n      const {images} = this.state;\r\n      const imagesGallerry = images.length ? (\r\n        images.map( img => {\r\n          return (\r\n            <div className=\"grid-item\" key={img.id}>\r\n               <div className=\"card\">\r\n                 <div className=\"card-image\">\r\n                   <img src={img.thumbnailUrl} alt={img.title} />\r\n                   <span className=\"card-title\">{img.id}</span>\r\n                 </div>\r\n                 <div className=\"card-content\">\r\n                   <p>{img.title}</p>\r\n                 </div>\r\n               </div>\r\n           </div>\r\n          )\r\n        })\r\n      ) : (\r\n        <div className='container'>LOADING GALLERY...</div>\r\n      )\r\n\r\n      return(\r\n        <div className='container-grid'>\r\n            {imagesGallerry}\r\n        </div>\r\n      )\r\n    }\r\n}\r\n\r\nexport default Gallery;\r\n","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\n//BrowserRouter: allows to change the current page without leaving the page\n//Route: specify the link roud, works similar to href and specify the path\n// Switch: only match and loads one component\n\nimport Home from './components/Home';\nimport About from './components/About';\nimport Contact from './components/Contact';\nimport Post from './components/Post';\nimport Gallery from './components/Gallery'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/contact' component={Contact} />\n            <Route path='/about' component={About} />\n            <Route path='/gallery' component={Gallery} />\n            <Route path='/:post_id' component={Post} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}